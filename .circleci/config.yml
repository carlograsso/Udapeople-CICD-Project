version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://proj3-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name  back-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name  front-<< parameters.workflow-id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
parameters:
  node_image:
    type: string
    default: circleci/node:latest
  aws_image:
    type: string
    default: amazon/aws-cli:latest
  ansible_image:
    type: string
    default: python:3.7-alpine3.11

jobs:
  build-frontend:
    docker:
      - image: << pipeline.parameters.node_image >>
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [./frontend/node_modules]
          key: frontend-build1
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: << pipeline.parameters.node_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install backend dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [./backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: << pipeline.parameters.node_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build1]
      - run:
          name: Execute front-end tests
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: << pipeline.parameters.node_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Execute back-end tests
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: << pipeline.parameters.node_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build1]
      - run:
          name: check for vulnerabilities in front-end
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: << pipeline.parameters.node_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: check for vulnerabilities in back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: << pipeline.parameters.aws_image >>
    steps:
      - checkout
      - run:
          name: "install required packages"
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=back-udapeople \
              --stack-name back-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=front-udapeople \
              --stack-name front-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=back-udapeople" \
            --output text >> .circleci/ansible/inventory.txt
            pwd
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment

  configure-infrastructure:
    docker:
      - image: << pipeline.parameters.ansible_image >>
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["44:cb:83:26:de:39:5c:97:bc:30:16:87:aa:3f:11:49"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # - destroy-environment

  run-migrations:
    docker:
      - image: << pipeline.parameters.node_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations-result.txt
      - run:
          name: Send migration results to memstash
          command: |
            tail -n 1 backend/migrations-result.txt
            if grep -q "has been executed successfully" backend/migrations-result.txt
            then
              curl -H "Content-Type: text/plain" -H "token: abe83e9e-ca9d-45da-b79b-4802026051b8" --request PUT --data "1" GET https://api.memstash.io/values/MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo ${CIRCLE_WORKFLOW_ID:0:7}

  #       # Here's where you will add some code to rollback on failure
  deploy-frontend:
    docker:
      - image: << pipeline.parameters.aws_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build1]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(head -n 2 .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp ./dist "s3://front-dddab9f" --recursive
      # Here's where you will add some code to rollback on failure

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations
      # requires: [configure-infrastructure]
      - deploy-frontend
        # requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
